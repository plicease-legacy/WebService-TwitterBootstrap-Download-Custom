=head1 NAME

WebService::TwitterBootstrap::Download::Custom - Download a customized version of Twitter Bootstrap

=head1 VERSION

version 0.01

=head1 SYNOPSIS

 use WebService::TwitterBootstrap::Download::Custom;
 my $dl = WebService::TwitterBootstrap::Download::Custom->new;
 # ... adjust js, css, vars and img attributes appropriately ...
 $dl->fetch_defaults;
 my $zip = $dl->download;
 $zip->extract_all('/your/project/location');

=head1 DESCRIPTION

This module allows you to create a custom Twitter Bootstrap and download
directly from the website without having to muck about with make files or
node.js.

The most common pattern is probably

=over 4

=item 1. fetch default values 

Using the C<fetch_defalts> method:

 use WebService::TwitterBootstrap::Download::Custom;
 my $dl = WebService::TwitterBootstrap::Download::Custom->new;
 $dl->fetch_defaults;

=item 2. filter

Remove any jQuery plugins or CSS components that you don't want.
As an example here we are removing the tooltip component and the
tab plugin.

 @{ $dl->css } = grep !/^tooltip\.less$/,     @{ $dl->css };
 @{ $dl->js  } = grep !/^bootstrap-tab\.js$/, @{ $dl->js };

=item 3. modify variables

Replace the values of any variables with new ones appropriate for your project

 $dl->vars->{'@altFontFamily'} = '@serifFontFamily';

=item 4. download

Fetch the custom bootstrap using the C<download> method.

 my $zip = $dl->download;

=item 5. extract

Using the resulting instance of L<WebService::TwitterBootstrap::Download::Custom::Zip>,
extract files using its C<extract_all> method.

 $zip->extract_all('/your/project/location');

=back

To visualize all of the defaults, it is probably worth looking at
L<http://twitter.github.com/bootstrap/customize.html>, where the 
defaults are retrieved.

=head1 ATTRIBUTES

=head2 js

List reference containing the jQuery plugins to include in your
custom bootstrap.

=head2 css

List reference containing the CSS components to include in your
custom bootstrap.

=head2 vars

Hash table containing the variable/value pairs.

=head2 img

List reference containing the images to include in your custom bootstrap.

=head2 labels

Hash table containing human understandable labels for the CSS and jQuery
plugins.

=head2 cache

Cache customizations of bootstrap.  That is, if you provide the same input
customization it will used a local cached copy instead of consulting the
website.  Cached copies are keept only for a set time and will be refreshed.

Set this to 0 (zero) to turn of caching.   Set to 1 (one) to use the default
location (somewhere in your home directory using L<File::HomeDir>).  Anything
else will be treated as a directory bath to find the cache.

This value gets converted and is used internally as a L<Path::Class::Dir>.

=head1 METHODS

=head2 $dl-E<gt>download

Download your custom bootstrap.  This will return an instance of
L<WebService::TwitterBootstrap::Download::Custom::Zip>, which can
be interrogated to retrieve the various files that make up your
custom bootstrap.  This method requires Internet access.

=head2 $dl-E<gt>fetch_defaults

Fetch the default values for the C<js>, C<css>, C<img> and C<var> attributes, and
fill out the C<labels> attribute.  This method requires Internet access.

=head1 AUTHOR

Graham Ollis <plicease@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Graham Ollis.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

